// Source code is decompiled from a .class file using FernFlower decompiler.
package edu.bu.tetris.nn.models;

import edu.bu.tetris.linalg.Matrix;
import edu.bu.tetris.nn.Model;
import edu.bu.tetris.nn.Module;
import edu.bu.tetris.nn.Parameter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class Sequential extends Model {
   private List<Module> layers;

   public Sequential() {
      this.layers = new LinkedList();
   }

   public Sequential(List<Module> var1) {
      this.layers = new ArrayList(var1.size());
      Iterator var2 = var1.iterator();

      while(var2.hasNext()) {
         Module var3 = (Module)var2.next();
         this.layers.add(var3);
      }

   }

   private List<Module> getLayers() {
      return this.layers;
   }

   public void add(Module var1) {
      this.getLayers().add(var1);
   }

   public Matrix forward(Matrix var1) throws Exception {
      Module var3;
      for(Iterator var2 = this.getLayers().iterator(); var2.hasNext(); var1 = var3.forward(var1)) {
         var3 = (Module)var2.next();
      }

      return var1;
   }

   public Matrix backwards(Matrix var1, Matrix var2) throws Exception {
      ArrayList var3 = new ArrayList(this.getLayers().size() + 1);
      var3.add(var1);
      Iterator var4 = this.getLayers().iterator();

      while(var4.hasNext()) {
         Module var5 = (Module)var4.next();
         var1 = var5.forward(var1);
         var3.add(var1);
      }

      ListIterator var7 = var3.listIterator(this.getLayers().size());

      for(ListIterator var6 = this.getLayers().listIterator(this.getLayers().size()); var6.hasPrevious(); var2 = ((Module)var6.previous()).backwards((Matrix)var7.previous(), var2)) {
      }

      return var2;
   }

   public List<Parameter> getParameters() {
      LinkedList var1 = new LinkedList();
      Iterator var2 = this.getLayers().iterator();

      while(var2.hasNext()) {
         Module var3 = (Module)var2.next();
         var1.addAll(var3.getParameters());
      }

      return var1;
   }

   public void save(String var1) {
      List var2 = this.getParameters();
      ArrayList var3 = new ArrayList(var2.size());
      Iterator var4 = var2.iterator();

      while(var4.hasNext()) {
         Parameter var5 = (Parameter)var4.next();
         var3.add(var5.toStringData());
      }

      File var9 = new File(var1);
      var9.getAbsoluteFile().getParentFile().mkdirs();

      try {
         BufferedWriter var10 = new BufferedWriter(new FileWriter(var9, false));
         Iterator var6 = var3.iterator();

         while(var6.hasNext()) {
            String var7 = (String)var6.next();
            var10.write(var7 + "\n");
         }

         var10.flush();
         var10.close();
      } catch (IOException var8) {
         System.err.println("Failed to save params to file. Reason: " + var8.getMessage());
      }

   }

   public void load(String var1) throws Exception {
      List var2 = this.getParameters();
      File var3 = new File(var1);
      if (!var3.exists()) {
         System.err.println("Failed to load params. File does not exist");
      } else {
         try {
            BufferedReader var4 = new BufferedReader(new FileReader(var3));
            ListIterator var6 = var2.listIterator(0);

            String var5;
            while((var5 = var4.readLine()) != null && var6.hasNext()) {
               ((Parameter)var6.next()).loadStringData(var5);
            }

            var4.close();
         } catch (IOException var7) {
            System.err.println("Failed to load weights from file. Reason: " + var7.getMessage());
         }

      }
   }
}
